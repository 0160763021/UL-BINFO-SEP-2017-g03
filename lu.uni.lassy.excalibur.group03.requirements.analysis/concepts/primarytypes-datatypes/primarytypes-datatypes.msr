/*
* @author nelson
* @date Mon Oct 30 14:30:21 CET 2017
*/

package lu.uni.lassy.excalibur.group03.requirements.analysis.concepts.primarytypes.datatypes {

import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.string



Concept Model {

	Primary Types {
   
	datatype dtAMessage extends dtString{
		operation is():ptBoolean
	}
	datatype dtLogin extends dtString{
		operation is():ptBoolean
	}
	datatype dtPassword extends dtString{
		operation is():ptBoolean
	}
	datatype dtVMName extends dtString{
		operation is():ptBoolean
	}
	datatype dtVMDescription extends dtString{
		operation is():ptBoolean
	}
	datatype dtComponentID extends dtString{
		operation is(): ptBoolean
		}
	datatype dtAmount extends dtInteger{
		operation is(): ptBoolean
		}
	datatype dtQuestionID extends dtString{
		operation is(): ptBoolean
		}
	datatype dtVMID extends dtString{
		operation is(): ptBoolean
		}	
	datatype dtBackupDescription extends dtString{
		operation is(): ptBoolean
		}
	datatype dtModel extends dtString{
		operation is(): ptBoolean
		}
	datatype dtCompName extends dtString{
		operation is(): ptBoolean
		}
	datatype dtSysID extends dtString{
		operation is(): ptBoolean
	}
	datatype dtSuperSysID extends dtString{
		operation is(): ptBoolean
				}
	datatype dtCores extends dtInteger{
		operation is(): ptBoolean
	}
	datatype dtClockSpeed extends dtInteger{
		operation is(): ptBoolean
	}
	datatype dtLicenseID extends dtInteger{
		operation is(): ptBoolean
	}
	datatype dtCapacity extends dtInteger{
		operation is(): ptBoolean
	}
	datatype dtBID extends dtString{
		operation is(): ptBoolean
				}
	datatype dtReqID {
		operation is(): ptBoolean
			}
	enum etComponent {
		constants["CPU", "RAM", "GPU", "HDD", "SSD", "Software"]
		operation is(): ptBoolean
	}
	enum etAnswer {
		constants["YES", "NO"]
		operation is(): ptBoolean
	}
	
	datatype dtFirstName extends dtString{
		operation is(): ptBoolean
	}
	datatype dtLastName extends dtString{
		operation is(): ptBoolean
	}
	datatype dtUserName extends dtString{
		operation is(): ptBoolean
	}
	datatype dtEmail extends dtString{
		operation is(): ptBoolean
	}
	datatype dtBirtthdtae extends dtDate{
		operation is(): ptBoolean
	}
	datatype dtPhoneNumber extends dtInteger{
		operation is(): ptBoolean
	}
	enum etRight {
		constants["True", "False"]
		operation is(): ptBoolean
	}
	enum etConfirmDelete {
		constants["Yes", "No"]
		operation is(): ptBoolean
	}
	
	
}
}
}
