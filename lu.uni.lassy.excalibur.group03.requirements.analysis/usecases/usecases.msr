/*
* @author nelson
* @date Mon Oct 30 14:30:21 CET 2017
*/

package lu.uni.lassy.excalibur.group03.requirements.analysis.usecases {

import lu.uni.lassy.messir.libraries.calendar
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.excalibur.group03.requirements.analysis.environment
import lu.uni.lassy.excalibur.group03.requirements.analysis.concepts.primarytypes.datatypes



	Use Case Model {
		
		
	use case system usergoal ugSecurelyUseSystem() {
		actor actSysAdmin[primary, active]
		
		reuse sfLogin[1..1]
		reuse sfLogout[1..1]
		
		step a: actSysAdmin executes sfLogin()
		step b: actSysAdmin executes sfLogout()
		
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
	use case system summary suVMLifecycle() {
		actor actSysAdmin[primary, active]
	
		reuse ugSecurelyUseSystem[1..*]
		reuse ugVMManagement[1..*]
		reuse ugBackup[1..*]
		
		step a: actSysAdmin executes ugSecurelyUseSystem()
		step b: actSysAdmin executes ugVMManagement()
		step c: actSysAdmin executes ugBackup()
		
		ordering constraint
		"step (a) needs to be done first"
		
		}
	use case system summary suDatacenterConf() {
		actor actSuperSysAdmin[primary, active]
		
		reuse ugDatacenterOverview[1..*]
		reuse ugComponentRequest[1..*]
		
		step a: actSuperSysAdmin executes ugDatacenterOverview()
		step b: actSuperSysAdmin executes ugComponentRequest()
		
		}
	
	use case system subfunction sfCreateVMTemplate(AdtVMID: dtVMID, AdtVMName: dtVMName, AdtVMDescription: dtVMDescription,
				AdtQID1: dtQuestionID, AetAnswer1: etAnswer,
				AdtQID2: dtQuestionID, AetAnswer2: etAnswer,
				AdtQID3: dtQuestionID, AetAnswer3: etAnswer,
				AdtQID4: dtQuestionID, AetAnswer4: etAnswer,
				AdtQID5: dtQuestionID, AetAnswer5: etAnswer,
				AdtQID6: dtQuestionID, AetAnswer6: etAnswer,
				AdtSysID: dtSysID) {
			actor actSysAdmin[primary, active]
			
			returned messages {
				ieMessage(AMessage) returned to actSysAdmin			
			}
		}
	use case system subfunction sfDeleteVM(AdtVMID: dtVMID, AdtSysID: dtSysID, AdtPassword: dtPassword) {
			actor actSysAdmin[primary, active]
		}
	use case system subfunction sfHotBackupVM(AdtBID: dtBID, BAdtSysID: dtSysID, AdtVMID: dtVMID, AdtDate: dtDate) {
			actor actSysAdmin[primary, active]
			
			returned messages {
				ieMessage(AMessage) returned to actSysAdmin
			}
		}
	
	use case system subfunction sfScheduledBackupVM(AdtBID: dtBID, BAdtSysID: dtSysID, AdtBackupDescription:dtBackupDescription, AdtVMID:dtVMID, AdtDate:dtDate) {
			actor actSysAdmin[primary, active]
			
			returned messages {
				ieMessage(AMessage) returned to actSysAdmin
			}
		}
	use case system usergoal ugDatacenterOverview() {
			actor actSuperSysAdmin[primary, active]
			
			reuse sfOverviewComponent[1..*]
			
			step a: actSuperSysAdmin executes sfOverviewComponent()
			
			}
	use case system usergoal ugComponentRequest() {
			actor actSuperSysAdmin[primary, active]
			
			reuse sfChooseModels[1..*]
			reuse sfConfirmChoice[1..1]
		
			step a: actSuperSysAdmin executes sfChooseModels()
			step b: actSuperSysAdmin executes sfConfirmChoice()
			}
	use case system subfunction sfOverviewComponent(AetComponent: etComponent) {
			actor actSuperSysAdmin[primary, active]
		}
	use case system subfunction sfChooseModels(AdtReqID: dtReqID, AdtCID: dtComponentID, AdtAmount: dtAmount) {
			actor actSuperSysAdmin[primary, active]
		}
	use case system subfunction sfConfirmChoice(AdtReqID:dtReqID) {
			actor actSuperSysAdmin[primary, active]
			
			returned messages{
				ieMessage(Message) returned to actSuperSysAdmin
			}
		}
	
	
	use case system summary suUserManagement() {
		actor actSuperSysAdmin[primary, active]
		actor actSysAdmin[primary,active]
		
		
		reuse ugSysAdminCreation[1..*] 
		reuse ugChangeId[1..*]
		reuse ugChangeEmail[1..*]
		reuse ugChangePw[1..*]
		reuse ugDeleteAcc[1..1]
		
		step a: actSuperSysAdmin executes ugSysAdminCreation()
		step b: actSuperSysAdmin executes ugChangeId()
		step c: actSuperSysAdmin executes ugChangeEmail()
		step d: actSuperSysAdmin executes ugChangePw()
		step e: actSysAdmin executes ugDeleteAcc()
		
		
		}
	use case system usergoal ugSysAdminCreation() {
		actor actSuperSysAdmin[primary, active]
		reuse sfCreateSysAdmin[1..*]
		
		
		step a: actSuperSysAdmin executes sfCreateSysAdmin()
	
		}
		
		
	use case system subfunction sfPersonalInformation() {
			actor actSuperSysAdmin[primary, active]
		}
		
		
	use case system usergoal ugChangeId() {
		actor actSuperSysAdmin[primary, active]
		actor actSysAdmin[primary,active]
		reuse sfConfirmPassword[1..*]
		reuse sfNewId[1..*]
		step a: actSuperSysAdmin executes sfConfirmPassword()
		step b: actSuperSysAdmin executes sfNewId()
		
		}
		
	use case system subfunction sfNewId(AdtNewId:dtUserName, AdtUserId:dtUserName) {
			actor  actAuthenticated[primary, active]
			
			
		}
		
		
	use case system usergoal ugChangeEmail() {
		actor actSuperSysAdmin[primary, active]
		actor actSysAdmin[primary,active]
		reuse sfNewEmail[1..*]
		reuse sfConfirmPassword[1..*]
		step a: actSuperSysAdmin executes sfConfirmPassword()
		step b: actSuperSysAdmin executes sfNewEmail()
		
		}
		
		use case system subfunction sfNewEmail(AdtNewEmail:dtEmail, AdtUserId:dtUserName) {
			actor  actAuthenticated[primary, active]
		}
		
		
	use case system usergoal ugChangePw() {
		actor actSuperSysAdmin[primary, active]
		actor actSysAdmin[primary,active]
		reuse sfNewPw[1..*]
		reuse sfConfirmPassword[1..*]
		step a: actSuperSysAdmin executes sfConfirmPassword()
		step b: actSuperSysAdmin executes sfNewPw()
		}
		
		use case system subfunction sfNewPw(AdtNewPw:dtPassword,AdtNewId:dtUserName) {
			actor  actAuthenticated[primary, active]
		}
		
		
	use case system usergoal ugDeleteAcc() {
		actor actSysAdmin[primary,active]
		reuse sfConfirmDelete[1..1]
		reuse sfConfirmPassword[1..*]
		step a: actSysAdmin executes sfConfirmPassword()
		step b: actSysAdmin executes sfConfirmDelete()
		}
	use case system subfunction sfConfirmDelete(AetConfirmDelete:etConfirmDelete, AdtUserId:dtUserName) {
			actor actSysAdmin[primary, active]
		}
	
	use case system subfunction sfGetAvailableComponents(AetComponent:etComponent) {
			actor actSysAdmin[primary, active]
			
			returned messages {
				ieMessage(Message) returned to actSysAdmin
			}
		}
	
	use case system subfunction sfGetProposedVM(AdtVMID:dtVMID) {
			actor actSysAdmin[primary, active]
			
			returned messages {
				ieMessage(Message) returned to actSysAdmin
			}
		}
	
	use case system summary suDeployAndRun() {
		
		actor actSuperSysAdmin[primary, active]
		actor actSysAdmin[primary, active]
		actor actCreator[primary, active]
		
		reuse suVMLifecycle[1..*]
		reuse suUserManagement[1..*]
		reuse suDatacenterConf[1..*]
		
		step a: actCreator executes sfCreateSystemAndEnvironment()
		step b: actSuperSysAdmin executes suDatacenterConf()
		step c: actSysAdmin executes suVMLifecycle()
		step d: actSysAdmin executes suUserManagement()
		
		}
	use case system subfunction sfCreateSystemAndEnvironment() {
			actor actCreator[primary, active]
		}
	use case system subfunction sfLogin() {
			actor actSysAdmin[primary, active]
			
			returned messages {
				ieMessage(Message) returned to actSysAdmin
			}
		}
	use case system subfunction sfLogout() {
			actor actSysAdmin[primary, active]
			
			returned messages {
				ieMessage(Message) returned to actSysAdmin
			}
		}
	
	use case system subfunction sfSetComponent(AdtVMID:dtVMID, AdtCID:dtComponentID, AdtAmount:dtAmount) {
			actor actSysAdmin[primary, active]
		}
	use case system subfunction sfConfirmPassword(AdtPassword:dtPassword, AdtUserId:dtUserName) {
			actor actAuthenticated[primary,active]
		}
	use case system subfunction sfAttributeRights() {
			actor actSuperSysAdmin[primary, active]
		}
	use case system subfunction sfCreateVMExpert(AdtVMID: dtVMID, AdtVMName: dtVMName, AdtVMDescription: dtVMDescription, 
				AdtCID1: dtComponentID, AdtAmount1: dtAmount,
				AdtCID2: dtComponentID, AdtAmount2: dtAmount,
				AdtCID3: dtComponentID, AdtAmount3: dtAmount,
				AdtCID4: dtComponentID, AdtAmount4: dtAmount,
				AdtCID5: dtComponentID, AdtAmount5: dtAmount,
				AdtCID6: dtComponentID, AdtAmount6: dtAmount,
				AdtSysID: dtSysID) {
			actor actSysAdmin[primary, active]
			
			returned messages {
				ieMessage(Message) returned to actSysAdmin
			}
		}
	use case system usergoal ugVMManagement() {
			actor actSysAdmin[primary, active]
			
			reuse sfCreateVMExpert[1..*]
			reuse sfCreateVMTemplate[1..*]
			reuse sfDeleteVM[1..*]
			reuse sfSetComponent[1..*]
			reuse sfGetAvailableComponents[1..*]
			reuse sfGetProposedVM[1..*]
			
			step a: actSysAdmin executes sfCreateVMExpert()
			step b: actSysAdmin executes sfCreateVMTemplate()
			step c: actSysAdmin executes sfDeleteVM()
			step d: actSysAdmin executes sfSetComponent()
			step e: actSysAdmin executes sfGetAvailableComponents()
			step f: actSysAdmin executes sfGetProposedVM()
			
			ordering constraint
			"step (c) can only be executed if (a) or (b) was executed once before"
		}
	use case system usergoal ugBackup() {
			actor actSysAdmin[primary, active]
			
			reuse sfHotBackupVM[1..*]
			reuse sfScheduledBackupVM[1..*]
			
			step a: actSysAdmin executes sfHotBackupVM()
			step b: actSysAdmin executes sfScheduledBackupVM()
		}
	use case system subfunction sfCreateSysAdmin(AdtFirstName:dtFirstName, AdtLastName:dtLastName, AdtUserName:dtUserName, AdtEmail:dtEmail, AdtBirthdate:dtDate, AdtPassword:dtPassword, AdtConfirmPassword:dtPassword, AdtPhoneNumber:dtPhoneNumber, AetRight1:etRight, AetRight2:etRight, AetRight3:etRight, AetRight4:etRight, AetRight5:etRight, AetRight6:etRight, AetRight7:etRight, AetRight8:etRight) {
			actor actSuperSysAdmin[primary, active]
		}
	}
}