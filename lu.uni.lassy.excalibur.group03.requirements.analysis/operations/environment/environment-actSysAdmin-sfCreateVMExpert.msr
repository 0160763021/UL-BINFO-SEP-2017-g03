package lu.uni.lassy.excalibur.group03.requirements.analysis.environment.operations.actSysAdmin.outactSysAdmin.sfCreateVMExpert {

import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.messir.libraries.calendar

import lu.uni.lassy.excalibur.group03.requirements.analysis.concepts.primarytypes.datatypes
import lu.uni.lassy.excalibur.group03.requirements.analysis.concepts.primarytypes.classes
import lu.uni.lassy.excalibur.group03.requirements.analysis.environment


	Operation Model {

		operation: lu.uni.lassy.excalibur.group03.requirements.analysis.environment.actSysAdmin.outactSysAdmin.sfCreateVMExpert(AdtVMID: dtVMID, AdtVMName: dtVMName, AdtVMDescription: dtVMDescription, 
				AdtCID1: dtComponentID, AdtAmount1: dtAmount,
				AdtCID2: dtComponentID, AdtAmount2: dtAmount,
				AdtCID3: dtComponentID, AdtAmount3: dtAmount,
				AdtCID4: dtComponentID, AdtAmount4: dtAmount,
				AdtCID5: dtComponentID, AdtAmount5: dtAmount,
				AdtCID6: dtComponentID, AdtAmount6: dtAmount,
				AdtSysID: dtSysID
			):ptBoolean{
				
				
				
				
		// include below the specification information (pre,post or ocl or prolog)
	
		//Pre Protocol
		preP{let TheSystem: ctState in
			let TheActor: actSysAdmin in 
			self.rnActor.rnSystem = TheSystem
			and self.rnActor = TheActor
			
			//Prep01
			and TheSystem.vpStarted = true
			//Prep02
			and TheActor.rnclAuthenticated.vpIsLogged = true}
		
		
		//Pre Functional
		preF{let TheSystem: ctState in
			let TheActor: actSysAdmin in
			let ColclVM:Bag(clVM) in
			let ColclComp1:Bag(clComponent) in
			let ColclComp2:Bag(clComponent) in
			let ColclComp3:Bag(clComponent) in
			let ColclComp4:Bag(clComponent) in
			let ColclComp5:Bag(clComponent) in
			let ColclComp6:Bag(clComponent) in
			
			self.rnActor.rnSystem = TheSystem
			and self.rnActor = TheActor
			
			
			//PreF01
			and TheSystem.rnclVM->select(Vid.eq(AdtVMID)) = ColclVMs
			and ColclVMs->isEmpty() = true
			
			//PreF02
			if(Cid.is(AdtCID1)) then(
				
				//PreF02
				and TheSystem.rnclComponent->select(Cid.eq(AdtCID1)) = ColclComponent1
				and ColclComponent1->isEmpty() = false
				
				//PreF03
				and ColclComponent1.CAvailable.gt(AdtAmount1)
				
			)else( true ) endif
		
			
			if(Cid.is(AdtCID2)) then(
				
				//PreF02
				and TheSystem.rnclComponent->select(Cid.eq(AdtCID2)) = ColclComponent2
				and ColclComponent2->isEmpty() = false
				
				//PreF03
				and ColclComponent2.CAvailable.gt(AdtAmount2)
				
			)else( true ) endif
			
			if(Cid.is(AdtCID3)) then(
				
				//PreF02
				and TheSystem.rnclComponent->select(Cid.eq(AdtCID3)) = ColclComponent3
				and ColclComponent3->isEmpty() = false
				
				//PreF03
				and ColclComponent3.CAvailable.gt(AdtAmount3)
				
			)else( true ) endif
			
			
			
			if(Cid.is(AdtCID4)) then(
				
				//PreF02
				and TheSystem.rnclComponent->select(Cid.eq(AdtCID4)) = ColclComponent4
				and ColclComponent4->isEmpty() = false
				
				//PreF03
				and ColclComponent4.CAvailable.gt(AdtAmount4)
				
			)else( true ) endif
			
			if(Cid.is(AdtCID5)) then(
				
				//PreF02
				and TheSystem.rnclComponent->select(Cid.eq(AdtCID5)) = ColclComponent5
				and ColclComponent5->isEmpty() = false
				
				//PreF03
				and ColclComponent5.CAvailable.gt(AdtAmount5)
				
				
				
			)else( true ) endif
			
			if(Cid.is(AdtCID6)) then(
				
				//PreF02
				and TheSystem.rnclComponent->select(Cid.eq(AdtCID6)) = ColclComponent6
				and ColclComponent6->isEmpty() = false
				
				//PreF03
				and ColclComponent6.CAvailable.gt(AdtAmount6)
				
			)else( true ) endif
			
		
	
		}
		//Post functional
		postF{let TheSystem: ctState in
			let TheclVM: clVM in
			let TheActor: actSysAdmin in
	
			let TheclComponentAmount1: clComponentAmount in
			let TheclComponentAmount2: clComponentAmount in
			let TheclComponentAmount3: clComponentAmount in
			let TheclComponentAmount4: clComponentAmount in
			let TheclComponentAmount5: clComponentAmount in
			let TheclComponentAmount6: clComponentAmount in
			
			let AptStringMessageForSysAdmin: ptString in
			
			self.rnActor.rnSystem =TheSystem
			
			//PreF01
			and dtVMID.is(AdtVMID) = true
			and dtVMName.is(AdtVMName) = true
			
			
			if ((dtVMDescription.is(AdtVMID) = false) or dtVMName.is(AdtVMName) = false)
			then(
				
				AptStringMessageForSysAdmin.eq("Missing name and/or description")
				and TheActor.rnInterfaceIN^ieMessage(AptStringMessageForSysAdmin)
				
			)else(
			
				TheclVM.init(AdtVMID, AdtVMName, AdtVMDescription)
				
				if(dtCid.is(AdtCID1)) then (TheclComponentAmount1.init(AdtVMID, AdtCID1, AdtAmount1)) else (true) endif
				if(dtCid.is(AdtCID2)) then (TheclComponentAmount1.init(AdtVMID, AdtCID2, AdtAmount2)) else (true) endif
				if(dtCid.is(AdtCID3)) then (TheclComponentAmount1.init(AdtVMID, AdtCID3, AdtAmount3)) else (true) endif
				if(dtCid.is(AdtCID4)) then (TheclComponentAmount1.init(AdtVMID, AdtCID4, AdtAmount4)) else (true) endif
				if(dtCid.is(AdtCID5)) then (TheclComponentAmount1.init(AdtVMID, AdtCID5, AdtAmount5)) else (true) endif
				if(dtCid.is(AdtCID6)) then (TheclComponentAmount1.init(AdtVMID, AdtCID6, AdtAmount6)) else (true) endif
				
				AptStringMessageForSysAdmin.eq("VM successfully created!")
				and TheActor.rnInterfaceIN^ieMessage(AptStringMessageForSysAdmin)
				
			)endif

		}
		
		//Post protocol
		postP{true}	
			
	
	}
	
	}
}
