package lu.uni.lassy.excalibur.group03.requirements.analysis.environment.operations.actAuthenticated.outactAuthenticated.sfConfirmPassword {

import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.messir.libraries.calendar

import lu.uni.lassy.excalibur.group03.requirements.analysis.concepts.primarytypes.datatypes
import lu.uni.lassy.excalibur.group03.requirements.analysis.concepts.primarytypes.classes
import lu.uni.lassy.excalibur.group03.requirements.analysis.environment
	Operation Model {

		operation: lu.uni.lassy.excalibur.group03.requirements.analysis.environment.actAuthenticated.outactAuthenticated.sfConfirmPassword(AdtPassword:dtPassword, AdtUserId:dtUserName):ptBoolean{
		// include below the specification information (pre,post or ocl or prolog)
		preP{let TheSystem:ctState in
					let TheActor: actSuperSysAdmin in 
					let TheActor2: actSysAdmin in
					self.rnActor.rnSystem = TheSystem
					and self.rnActor = TheActor
					
					//Prep01
					and TheSystem.vpStarted = true
					//Prep02
					and TheActor.rnclAuthenticated.vpIsLogged = true}
					
					//Pre Functional
					preF{
						true
						}
					
					
					//Post functional
					postF{let TheSystem: ctState in
					let TheSysAdmin: actSysAdmin in
					let TheSuperSysAdmin: actSuperSysAdmin in
					
					self.rnActor.rnSystem =TheSystem
					and self.rnActor = TheactAuthenticated
					
					//PostF01
			if(self.rnActor.password.eq(AdtPassword)==false) then(
				AptStringMessageForTheaclAuthenticated.eq("Wrong Password")
				and TheSysAdmin.rnInterfaceIN^ieMessage(AptStringMessageForSysAdmin)
			
			
			)else(
				self.rnActor.password.eq(AdtPassword)==true
			)endif
			}
			//Post protocol
		postP{true}	
		
		}
	}
}
